/*  jFUSE-ll provides low level bindings to FUSE in Java
    Copyright (C) <2011>  <Christopher Brumgard>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class jFUSE_lowlevel_ConnInfo */

#ifndef _Included_jFUSE_lowlevel_ConnInfo
#define _Included_jFUSE_lowlevel_ConnInfo
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getProtoMajor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getProtoMajor
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getProtoMinor
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getProtoMinor
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getAsyncRead
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getAsyncRead
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    setAsyncRead
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jFUSE_lowlevel_ConnInfo_setAsyncRead
  (JNIEnv *, jobject, jint);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getMaxWrite
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getMaxWrite
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    setMaxWrite
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jFUSE_lowlevel_ConnInfo_setMaxWrite
  (JNIEnv *, jobject, jint);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getMaxReadahead
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getMaxReadahead
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    setMaxReadahead
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jFUSE_lowlevel_ConnInfo_setMaxReadahead
  (JNIEnv *, jobject, jint);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getCapable
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getCapable
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    setCapable
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jFUSE_lowlevel_ConnInfo_setCapable
  (JNIEnv *, jobject, jint);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    getWant
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jFUSE_lowlevel_ConnInfo_getWant
  (JNIEnv *, jobject);

/*
 * Class:     jFUSE_lowlevel_ConnInfo
 * Method:    setWant
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jFUSE_lowlevel_ConnInfo_setWant
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
